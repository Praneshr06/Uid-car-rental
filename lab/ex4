Aim:
   To Create a simple e-commerce website with minimum of three pages. Use React Router to implement routing between these
pages.

Description:
      This project is a simple React-based e-commerce website with at least three pages: Home, Products, and Contact/Cart.
React Router is used to enable smooth navigation between pages without reloading the browser. Each page is built as a separate component,
making the website modular and easy to maintain. The Home page introduces the website, the Products page lists items with basic details, 
and the Contact/Cart page allows users to view or inquire about products. CSS styling ensures a clean, responsive, and visually appealing interface.
This structure provides a foundation that can be expanded into a full-featured e-commerce application in the future.

Coding:
import React, { useMemo, useState } from 'react';
import { useAppState } from '../context/AppState';

export default function Bookings() {
  const { cars, bookings, addBooking, removeBooking } = useAppState();
  const [dailyRate, setDailyRate] = useState('');
  const [days, setDays] = useState('');
  const [taxRate, setTaxRate] = useState('18');
  const [discount, setDiscount] = useState('0');
  const [selectedCarId, setSelectedCarId] = useState('');

  const totals = useMemo(() => {
    const rate = Number(dailyRate) || 0;
    const numDays = Number(days) || 0;
    const subtotal = rate * numDays;
    const discountAmt = (Number(discount) || 0) / 100 * subtotal;
    const taxable = Math.max(0, subtotal - discountAmt);
    const taxAmt = (Number(taxRate) || 0) / 100 * taxable;
    const total = taxable + taxAmt;
    return { subtotal, discountAmt, taxAmt, total };
  }, [dailyRate, days, taxRate, discount]);

  function createBooking() {
    const car = cars.find((c) => String(c.id) === String(selectedCarId));
    if (!car) return;
    const rate = Number(dailyRate) || car.pricePerDay;
    const numDays = Number(days) || 1;
    addBooking({ carId: car.id, carLabel: `${car.brand} ${car.model}`, pricePerDay: rate, days: numDays, total: Number(totals.total.toFixed(2)), createdAt: new Date().toISOString() });
  }

  return (
    <section className="intro">
      <h2>Bookings</h2>
      <p>Create and view bookings. The total updates automatically.</p>

      <div className="controls controls-rows">
        <select value={selectedCarId} onChange={(e) => setSelectedCarId(e.target.value)} aria-label="Select car">
          <option value="">Select a car...</option>
          {cars.map((c) => (
            <option key={c.id} value={c.id}>{c.brand} {c.model} (${c.pricePerDay}/day)</option>
          ))}
        </select>
        <input type="number" min="0" placeholder="Daily rate ($)" value={dailyRate} onChange={(e) => setDailyRate(e.target.value)} aria-label="Daily rate" />
        <input type="number" min="1" placeholder="Days" value={days} onChange={(e) => setDays(e.target.value)} aria-label="Days" />
        <input type="number" min="0" max="100" placeholder="Tax %" value={taxRate} onChange={(e) => setTaxRate(e.target.value)} aria-label="Tax rate" />
        <input type="number" min="0" max="100" placeholder="Discount %" value={discount} onChange={(e) => setDiscount(e.target.value)} aria-label="Discount" />
      </div>

      <ul className="items">
        <li className="item"><span>Subtotal</span><strong>${totals.subtotal.toFixed(2)}</strong></li>
        <li className="item"><span>Discount</span><strong>-${totals.discountAmt.toFixed(2)}</strong></li>
        <li className="item"><span>Tax</span><strong>${totals.taxAmt.toFixed(2)}</strong></li>
        <li className="item"><span>Total</span><strong>${totals.total.toFixed(2)}</strong></li>
      </ul>

      <div className="actions" style={{ marginTop: 12 }}>
        <button onClick={createBooking}>Create Booking</button>
      </div>

      <h3 style={{ marginTop: 16 }}>Existing Bookings</h3>
      {bookings.length === 0 ? (
        <p className="empty">No bookings yet.</p>
      ) : (
        <ul className="cars">
          {bookings.map((b) => (
            <li key={b.id} className="car">
              <div className="car-main">
                <h3>{b.carLabel}</h3>
                <p className="muted">{b.days} day(s) • ${b.pricePerDay}/day</p>
              </div>
              <div className="car-meta">
                <div className="price">Total ${b.total.toFixed(2)}</div>
                <div className="actions">
                  <button className="remove" onClick={() => removeBooking(b.id)}>Cancel</button>
                </div>
              </div>
            </li>
          ))}
        </ul>
      )}
    </section>
  );
}
import React, { useMemo, useState } from 'react';
import { useAppState } from '../context/AppState';

export default function Inventory() {
  const { cars, addCar, updateCar, removeCar } = useAppState();
  const [query, setQuery] = useState('');
  const [maxPrice, setMaxPrice] = useState('');
  const [form, setForm] = useState({ brand: '', model: '', pricePerDay: '', seats: '', transmission: 'Automatic', available: true, image: '' });

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    return cars.filter((c) => {
      const matchesQuery = !q || `${c.brand} ${c.model}`.toLowerCase().includes(q);
      const matchesPrice = !maxPrice || c.pricePerDay <= Number(maxPrice);
      return matchesQuery && matchesPrice;
    });
  }, [cars, query, maxPrice]);

  function onChange(e) {
    const { name, value, type, checked } = e.target;
    setForm((p) => ({ ...p, [name]: type === 'checkbox' ? checked : value }));
  }

  function onAdd(e) {
    e.preventDefault();
    const brand = form.brand.trim();
    const model = form.model.trim();
    const img = form.image.trim();
    const seats = Number(form.seats);
    const price = Number(form.pricePerDay);
    if (!brand || !model || !price || price <= 0 || !seats || seats <= 0) return;
    addCar({ brand, model, image: img || undefined, pricePerDay: price, seats, transmission: form.transmission, available: form.available });
    setForm({ brand: '', model: '', pricePerDay: '', seats: '', transmission: 'Automatic', available: true, image: '' });
  }

  return (
    <section className="intro">
      <h2>Inventory</h2>

      <form className="controls" onSubmit={onAdd}>
        <input name="brand" placeholder="Brand" value={form.brand} onChange={onChange} />
        <button type="submit">Add</button>
        <input name="model" placeholder="Model" value={form.model} onChange={onChange} />
      </form>

      <div className="controls controls-rows">
        <input name="pricePerDay" type="number" min="1" placeholder="Price/day" value={form.pricePerDay} onChange={onChange} />
        <select name="transmission" value={form.transmission} onChange={onChange}>
          <option>Automatic</option>
          <option>Manual</option>
        </select>
        <input name="seats" type="number" min="2" placeholder="Seats" value={form.seats} onChange={onChange} />
        <label className="checkbox">
          <input name="available" type="checkbox" checked={form.available} onChange={onChange} /> Available
        </label>
      </div>

      <div className="controls controls-rows">
        <input name="image" placeholder="Image URL (optional)" value={form.image} onChange={onChange} />
        <input type="search" placeholder="Search..." value={query} onChange={(e) => setQuery(e.target.value)} />
        <input type="number" min="1" placeholder="Max price" value={maxPrice} onChange={(e) => setMaxPrice(e.target.value)} />
      </div>

      <ul className="cars">
        {filtered.map((car) => (
          <li key={car.id} className={`car ${car.available ? 'available' : 'unavailable'}`}>
            <div className="car-image">
              <img src={car.image || 'https://images.unsplash.com/photo-1503376780353-7e6692767b70?w=1200&q=80&auto=format&fit=crop'} alt={`${car.brand} ${car.model}`} />
            </div>
            <div className="car-main">
              <h3>{car.brand} {car.model}</h3>
              <p className="muted">{car.transmission} • {car.seats} seats</p>
            </div>
            <div className="car-meta">
              <div className="price">${car.pricePerDay}/day</div>
              <div className={`status ${car.available ? 'ok' : 'bad'}`}>{car.available ? 'Available' : 'Booked'}</div>
              <div className="actions">
                <button onClick={() => updateCar(car.id, { available: !car.available })}>{car.available ? 'Rent' : 'Return'}</button>
                <button className="remove" onClick={() => removeCar(car.id)}>Remove</button>
              </div>
            </div>
          </li>
        ))}
      </ul>
    </section>
  );
}

Result:
    A React e-commerce website with three pages (Home, Products, Contact/Cart) using React Router for seamless navigation and a clean, responsive design.




